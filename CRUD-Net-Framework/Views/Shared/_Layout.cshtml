<!DOCTYPE html>
<html>
<head>
    <link rel="manifest" href="/manifest.json">
    <link rel="apple-touch-icon" href="~/Content/images/icon-72x72.png">
    <link rel="canonical" href="https://www.google.com/" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#2196f3" />
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                <button onclick="showNotifikasiSederhana('isi index notif')">Notifikasi Sederhana dengan Title dan Body</button>

            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                    <li>@Html.ActionLink("Dashboard", "ViewDataObat", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
<script>
    // Check that service workers are registered
    if ('serviceWorker' in navigator) {
        // Use the window load event to keep the page load performant
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/serviceworker.js', {
                scope: './'
            });
            console.log('register a new service worker!');
        });
    } else {
        console.log('No need to register a new service worker!');
    }

    // Periksa fitur Notification API
    if ("Notification" in window) {
        requestPermission();
    } else {
        console.error("Browser tidak mendukung notifikasi.");
    }
    // Meminta ijin menggunakan Notification API
    function requestPermission() {
        Notification.requestPermission().then(function (result) {
            if (result === "denied") {
                console.log("Fitur notifikasi tidak diijinkan.");
                return;
            } else if (result === "default") {
                console.error("Pengguna menutup kotak dialog permintaan ijin.");
                return;
            }

            console.log("Fitur notifikasi diijinkan.");
        });
    }

    // menampilkan push notifikasi manual
    function showNotifikasiSederhana(isi) {
        const title = 'Notifications';
        const options = {
            'body': isi,
            silent: false,
            'image': 'Content/images/icon-114x114.png',
            'icon': 'Content/images/icon-114x114.png',
            'badge': 'Content/images/icon-114x114.png',
            'actions': [
                {
                    'action': 'yes-action',
                    'title': 'Ya',
                    'icon': 'https://cdn.pixabay.com/photo/2016/03/31/14/37/check-mark-1292787_640.pngg'
                },
                {
                    'action': 'no-action',
                    'title': 'Tidak',
                    'icon': 'https://emojipedia.id/wp-content/uploads/2020/03/Emoji-Tanda-Silang-Apple.png'
                }
            ]
        }
        if (Notification.permission === 'granted') {
            navigator.serviceWorker.ready.then(function (registration) {
                registration.showNotification(title, options);
            });
        } else {
            console.error('FItur notifikasi tidak diijinkan.');
        }
    }

    // subscribe fcm
    if (('PushManager' in window)) {
        navigator.serviceWorker.getRegistration().then(function (registration) {
            registration.pushManager.subscribe({
                userVisibleOnly: true,
                applicationServerKey: urlBase64ToUint8Array("BIV28ETpqsewVNPrw8FfizrOkZNl5-tKR4qa95cagATS269Fz_8nIW5xtoNz7pme6GcJZ79j5IiCjOdWJFNOBsY"),
            }).then(function (subscribe) {
                console.log('Berhasil melakukan subscribe dengan endpoint: ', subscribe.endpoint);
                console.log('Berhasil melakukan subscribe dengan p256dh key: ', btoa(String.fromCharCode.apply(
                    null, new Uint8Array(subscribe.getKey('p256dh')))));
                console.log('Berhasil melakukan subscribe dengan auth key: ', btoa(String.fromCharCode.apply(
                    null, new Uint8Array(subscribe.getKey('auth')))));
            }).catch(function (e) {
                console.error('Tidak dapat melakukan subscribe ', e.message);
            });
        });

        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
                .replace(/-/g, '+')
                .replace(/_/g, '/');
            const rawData = window.atob(base64);
            const outputArray = new Uint8Array(rawData.length);
            for (let i = 0; i < rawData.length; ++i) {
                outputArray[i] = rawData.charCodeAt(i);
            }
            return outputArray;
        }
    }
</script>